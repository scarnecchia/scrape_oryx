select(path, change_time, birth_time)
?stringr::str_which
?stringr::str_match
file = "totals_by_system"
file = "totals_by_system"
x <- fs::dir_info("inputfiles") %>%
dplyr::select(path, change_time, birth_time) %>%
dplyr::filter(path == stringr::str_match(!!!file)
)
file = "totals_by_system"
x <- fs::dir_info("inputfiles") %>%
dplyr::select(path, change_time, birth_time) %>%
dplyr::filter(path == stringr::str_match(., !!!file)
)
file = "totals_by_system"
x <- fs::dir_info("inputfiles") %>%
dplyr::select(path, change_time, birth_time) %>%
dplyr::filter(path == stringr::str_match(path, !!!file))
file = "totals_by_system"
x <- fs::dir_info("inputfiles") %>%
dplyr::select(path, change_time, birth_time) %>%
dplyr::filter(path == stringr::str_match(path, !!!file*.))
file = "totals_by_system"
x <- fs::dir_info("inputfiles") %>%
dplyr::select(path, change_time, birth_time) %>%
dplyr::filter(path == stringr::str_match(path, file))
file = "totals_by_system"
x <- fs::dir_info("inputfiles") %>%
dplyr::select(path, change_time, birth_time) %>%
dplyr::filter(path == stringr::str_detect(path, file))
x <- fs::dir_info("inputfiles")
x <- fs::dir_info("inputfiles") %>%
dplyr::select(path, change_time, birth_time) %>%
dplyr::filter(path == stringr::str_detect(path, !!!file))
file = !!!totals_by_system
file = "totals_by_system"
!!!file
file
file = "totals_by_system"
x <- fs::dir_info("inputfiles") %>%
dplyr::select(path, change_time, birth_time)
file = "totals_by_system"
file = glue::glue("{file}*.")
file = "totals_by_system"
file = glue::glue("{file}.+")
x <- fs::dir_info("inputfiles") %>%
dplyr::select(path, change_time, birth_time) %>%
dplyr::filter(path == stringr::str_detect(path, file))
?sprintf
file = "totals_by_system"
file = glue::glue("{file}.+")
x <- fs::dir_info("inputfiles") %>%
dplyr::select(path, change_time, birth_time) %>%
dplyr::filter(path == sprintf(stringr::str_detect(path, "%s")), file)
file = "totals_by_system"
x <- fs::dir_info("inputfiles") %>%
dplyr::select(path, change_time, birth_time) %>%
dplyr::filter(path == sprintf(stringr::str_detect(path, "%s.+")), file)
?fs::dir_info
file = "totals_by_system"
x <- fs::dir_info(glue::glue("inputfiles\{file}"), glob="*.csv")
x <- fs::dir_info(glue::glue("inputfiles/{file}"), glob="*.csv")
x <- fs::dir_info("inputfiles", glob="*.csv") %>%
dplyr::select(path, change_time, birth_time)
x <- fs::dir_info("inputfiles", glob="*.csv") %>%
dplyr::select(path, change_time, birth_time) %>%
dplyr::filter(birth_time = max(birth_time))
x <- fs::dir_info("inputfiles", glob="*.csv") %>%
dplyr::select(path, change_time, birth_time) %>%
dplyr::filter(birth_time == max(birth_time))
?Sys.glob
x <- fs::dir_info("inputfiles", regexp=file, glob="*.csv")
x <- fs::dir_info("inputfiles", regexp=file)
View(x)
x
file = "totals_by_system"
x <- fs::dir_info("inputfiles", regexp=file) %>%
dplyr::select(path, change_time, birth_time) %>%
dplyr::filter(birth_time == max(birth_time))
x <- fs::dir_info("inputfiles", regexp=file) %>%
dplyr::select(path, change_time, birth_time) %>%
dplyr::filter(birth_time == max(birth_time)) %>%
dplyr::pull(path)
get_inputfile <- function(file) {
fs::dir_info("inputfiles", regexp=file) %>%
dplyr::select(path, change_time, birth_time) %>%
dplyr::filter(birth_time == max(birth_time)) %>%
dplyr::pull(path)
}
get_inputfile <- function(file) {
path <- fs::dir_info("inputfiles", regexp=file) %>%
dplyr::select(path, change_time, birth_time) %>%
dplyr::filter(birth_time == max(birth_time)) %>%
dplyr::pull(path)
readr::read_csv(path)
}
previous <- get_inputfile("totals_by_system") %>%
trim_all() %>%
dplyr::mutate(date_recorded = as.Date(date_recorded))
trim_all <- function(indsn) {
indsn %>% dplyr::ungroup() %>%
dplyr::mutate(dplyr::across(tidyr::everything(), ~ stringr::str_trim(.,)))
}
previous <- get_inputfile("totals_by_system") %>%
trim_all() %>%
dplyr::mutate(date_recorded = as.Date(date_recorded))
View(previous)
path <- fs::dir_info("inputfiles", regexp=file) %>%
dplyr::select(path, change_time, birth_time) %>%
dplyr::filter(birth_time == max(birth_time)) %>%
dplyr::pull(path)
logr::put(path)
readr::read_csv(path)
get_inputfile <- function(file) {
path <- fs::dir_info("inputfiles", regexp=file) %>%
dplyr::select(path, change_time, birth_time) %>%
dplyr::filter(birth_time == max(birth_time)) %>%
dplyr::pull(path)
logr::put(path)
readr::read_csv(path)
}
baseline <- get_inputfile("daily_count_baseline")
#!/usr/bin/env Rscript
#' @title scrape_oryx
#' @description A simple R script for extracting tabular data from Oryx' excellent
#'   post detailing materiel lost by all sides in the [Russian invasion of
#'   Ukraine](https://www.oryxspioenkop.com/2022/02/attack-on-europe-documenting-equipment.html).
#'
#'
#' @author Daniel Scarnecchia
# Setup
if (Sys.info()["sysname"] == "Linux") {
Sys.setenv(R_INSTALL_STAGED = FALSE)
print("Setting Staged Install to False")
}
library(renv)
renv::restore()
library(rvest)
library(dplyr)
library(tidyr)
library(lubridate)
library(purrr)
library(magrittr)
library(tibble)
library(stringr)
library(readr)
library(glue)
library(logr)
library(ggplot2)
library(scales)
library(ggthemes)
source("R/functions.R")
source("R/scrape_data.R")
source("R/totals_by_type.R")
source("R/per_event.R")
source("R/daily_count.R")
totals_by_system <- scrape_data() %>%
readr::write_csv(., file = glue::glue("outputfiles/totals_by_system.csv"))
materiel <-
get_data(
"https://www.oryxspioenkop.com/2022/02/attack-on-europe-documenting-equipment.html",
"article"
) %>%
rvest::html_elements("li")
# Retreive the start position of each country
country_pos <- materiel %>% rvest::html_text2() %>%
# T-64BV is the first row in the tank list and marks the beginning of each country
stringr::str_which("T-64BV")
#' Run Program
data <-
tibble::tibble(
country = character(),
origin = character(),
system = character(),
status = character(),
url = character()
)
counter = 0
for (a in seq_along(materiel)) {
status <- materiel[[a]] %>% rvest::html_elements("a")
for (b in seq_along(status)) {
counter = counter + 1
data[counter, 1] <-
ifelse(a < country_pos[2], "Russia", "Ukraine")
data[counter, 2] <- extract_origin(materiel, a)
data[counter, 3] <- extract_system(materiel, a)
data[counter, 4] <- extract_status(status, b)
data[counter, 5] <- extract_url(status, b)
}
}
data <- data %>%
dplyr::mutate(status = stringr::str_extract_all(status, "destroyed|captured|abandoned|damaged")) %>%
tidyr::unnest_longer(status) %>%
dplyr::mutate(date_recorded = as.Date(lubridate::today())) %>%
trim_all()
previous <- get_inputfile("totals_by_system") %>%
trim_all() %>%
dplyr::mutate(date_recorded = as.Date(date_recorded))
check <- data %>%
dplyr::anti_join(previous, by = c("url")) %>%
dplyr::mutate(date_recorded = as.Date(date_recorded))
data <- check %>% get_inputfile("totals_by_system") %>%
dplyr::bind_rows() %>%
dplyr::arrange(country, system, date_recorded)
data <- check %>% dplyr::bind_rows(get_inputfile("totals_by_system")) %>%
dplyr::arrange(country, system, date_recorded)
renv::restore()
library(rvest)
library(dplyr)
library(tidyr)
library(lubridate)
library(purrr)
library(magrittr)
library(tibble)
library(stringr)
library(readr)
library(glue)
library(logr)
library(ggplot2)
library(scales)
library(ggthemes)
source("R/functions.R")
source("R/scrape_data.R")
source("R/totals_by_type.R")
source("R/per_event.R")
source("R/daily_count.R")
russia_url <- "https://www.oryxspioenkop.com/2022/02/attack-on-europe-documenting-equipment.html"
ukraine_url <- "https://www.oryxspioenkop.com/2022/02/attack-on-europe-documenting-ukrainian.html"
today <- format(Sys.Date(), "%Y-%m-%d")
totals_by_system <- create_data() %>%
readr::write_csv(., file = glue::glue("outputfiles/totals_by_system.csv"))
create_event_tables(totals_by_system, status)
totals_by_system_wide <- total_by_system_wide(totals_by_system) %>%
readr::write_csv(.,
file = glue::glue("outputfiles/totals_by_system_wide.csv"))
total_by_type <- totals_by_type() %>%
readr::write_csv(., file = glue::glue("outputfiles/totals_by_type.csv"))
rmarkdown::render("index.Rmd")
install.packages("styler")
library(styler)
styler:::style_selection()
styler:::style_selection()
styler:::set_style_transformers()
?styler
styler:::style_active_file()
styler:::style_selection()
styler:::style_selection()
styler:::style_active_file()
styler:::style_selection()
install.packages("roxygen")
styler:::style_active_file()
styler:::style_active_file()
styler:::style_selection()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_selection()
styler:::style_selection()
#!/usr/bin/env Rscript
#' @title scrape_oryx
#' @description A simple R script for extracting tabular data from Oryx' excellent
#'   post detailing materiel lost by all sides in the [Russian invasion of
#'   Ukraine](https://www.oryxspioenkop.com/2022/02/attack-on-europe-documenting-equipment.html).
#'
#'
#' @author Daniel Scarnecchia
# Setup
if (Sys.info()["sysname"] == "Linux") {
Sys.setenv(R_INSTALL_STAGED = FALSE)
print("Setting Staged Install to False")
}
library(renv)
renv::restore()
library(rvest)
library(dplyr)
library(tidyr)
library(lubridate)
library(purrr)
library(magrittr)
library(tibble)
library(stringr)
library(readr)
library(glue)
library(logr)
library(ggplot2)
library(scales)
library(ggthemes)
source("R/functions.R")
source("R/scrape_data.R")
source("R/totals_by_type.R")
source("R/per_event.R")
source("R/daily_count.R")
russia_url <- "https://www.oryxspioenkop.com/2022/02/attack-on-europe-documenting-equipment.html"
ukraine_url <- "https://www.oryxspioenkop.com/2022/02/attack-on-europe-documenting-ukrainian.html"
# tmp <-
#   file.path("outputfiles", sprintf("scrape_oryx_%s.log", format(Sys.time(), "%Y%m%dT%H%M%S")))
#lf <- logr::log_open(tmp)
today <- format(Sys.Date(), "%Y-%m-%d")
totals_by_system <- create_data() %>%
readr::write_csv(., file = glue::glue("outputfiles/totals_by_system.csv"))
#' Write Event Tables
create_event_tables(totals_by_system, status)
totals_by_system_wide <- total_by_system_wide(totals_by_system) %>%
readr::write_csv(.,
file = glue::glue("outputfiles/totals_by_system_wide.csv"))
total_by_type <- totals_by_type() %>%
readr::write_csv(., file = glue::glue("outputfiles/totals_by_type.csv"))
daily_count <- daily_count() %>%
readr::write_csv(., file = "outputfiles/daily_count.csv")
rmarkdown::render("index.Rmd")
# logr::log_code()
# logr::log_close()
#
# writeLines(readLines(lf))
russia <- scrape_data("Russia")
ukraine <- scrape_data("Ukraine")
data <- russia %>%
dplyr::bind_rows(ukraine) %>%
dplyr::select(country, origin, system, status, url, date_recorded) %>%
dplyr::distinct()
previous <- get_inputfile("totals_by_system") %>%
trim_all() %>%
dplyr::mutate(date_recorded = as.Date(date_recorded)) %>%
dplyr::select(country, origin, system, status, url, date_recorded) %>%
dplyr::distinct()
check <- data %>%
dplyr::anti_join(previous, by = c("url")) %>%
dplyr::mutate(date_recorded = as.Date(date_recorded))
previous <- get_inputfile(.file="totals_by_system") %>%
trim_all() %>%
dplyr::mutate(date_recorded = as.Date(date_recorded)) %>%
dplyr::select(country, origin, system, status, url, date_recorded) %>%
dplyr::distinct()
previous <- get_inputfile(.file="totals_by_system")
get_inputfile <- function(.file) {
path <- fs::dir_info("inputfiles", type = "file") %>%
dplyr::select(path, change_time, birth_time) %>%
dplyr::filter(stringr::str_detect(path, .file)) %>%
dplyr::filter(birth_time == max(birth_time)) %>%
dplyr::pull(path)
message(path)
# logr::put(path)
readr::read_csv(path)
}
previous <- get_inputfile(.file="totals_by_system")
#!/usr/bin/env Rscript
#' @title scrape_oryx
#' @description A simple R script for extracting tabular data from Oryx' excellent
#'   post detailing materiel lost by all sides in the [Russian invasion of
#'   Ukraine](https://www.oryxspioenkop.com/2022/02/attack-on-europe-documenting-equipment.html).
#'
#'
#' @author Daniel Scarnecchia
# Setup
if (Sys.info()["sysname"] == "Linux") {
Sys.setenv(R_INSTALL_STAGED = FALSE)
print("Setting Staged Install to False")
}
library(renv)
renv::restore()
library(rvest)
library(dplyr)
library(tidyr)
library(lubridate)
library(purrr)
library(magrittr)
library(tibble)
library(stringr)
library(readr)
library(glue)
library(logr)
library(ggplot2)
library(scales)
library(ggthemes)
source("R/functions.R")
source("R/scrape_data.R")
source("R/totals_by_type.R")
source("R/per_event.R")
source("R/daily_count.R")
russia_url <- "https://www.oryxspioenkop.com/2022/02/attack-on-europe-documenting-equipment.html"
ukraine_url <- "https://www.oryxspioenkop.com/2022/02/attack-on-europe-documenting-ukrainian.html"
# tmp <-
#   file.path("outputfiles", sprintf("scrape_oryx_%s.log", format(Sys.time(), "%Y%m%dT%H%M%S")))
#lf <- logr::log_open(tmp)
today <- format(Sys.Date(), "%Y-%m-%d")
totals_by_system <- create_data() %>%
readr::write_csv(., file = glue::glue("outputfiles/totals_by_system.csv"))
#' Write Event Tables
create_event_tables(totals_by_system, status)
totals_by_system_wide <- total_by_system_wide(totals_by_system) %>%
readr::write_csv(.,
file = glue::glue("outputfiles/totals_by_system_wide.csv"))
total_by_type <- totals_by_type() %>%
readr::write_csv(., file = glue::glue("outputfiles/totals_by_type.csv"))
daily_count <- daily_count() %>%
readr::write_csv(., file = "outputfiles/daily_count.csv")
rmarkdown::render("index.Rmd")
# logr::log_code()
# logr::log_close()
#
# writeLines(readLines(lf))
previous <- get_inputfile(.file="totals_by_system")
get_inputfile <- function(.file) {
path <- fs::dir_info("inputfiles", type = "file", regexp=".file") %>%
dplyr::filter(stringr::str_remove(path, "*.bak")) %>%
dplyr::select(path, change_time, birth_time) %>%
dplyr::filter(stringr::str_detect(path, .file)) %>%
dplyr::filter(birth_time == max(birth_time)) %>%
dplyr::pull(path)
message(path)
# logr::put(path)
readr::read_csv(path)
}
previous <- get_inputfile(.file="totals_by_system")
get_inputfile <- function(.file) {
path <- fs::dir_info("inputfiles", type = "file", regexp=".file") %>%
dplyr::filter(path = stringr::str_remove("*.bak")) %>%
dplyr::select(path, change_time, birth_time) %>%
dplyr::filter(stringr::str_detect(path, .file)) %>%
dplyr::filter(birth_time == max(birth_time)) %>%
dplyr::pull(path)
message(path)
# logr::put(path)
readr::read_csv(path)
}
previous <- get_inputfile(.file="totals_by_system")
get_inputfile <- function(.file) {
path <- fs::dir_info("inputfiles", type = "file", regexp=".file") %>%
dplyr::filter(path == stringr::str_remove("*.bak")) %>%
dplyr::select(path, change_time, birth_time) %>%
dplyr::filter(stringr::str_detect(path, .file)) %>%
dplyr::filter(birth_time == max(birth_time)) %>%
dplyr::pull(path)
message(path)
# logr::put(path)
readr::read_csv(path)
}
previous <- get_inputfile(.file="totals_by_system")
?stringr::str_remove
get_inputfile <- function(.file) {
path <- fs::dir_info("inputfiles", type = "file", regexp=".file") %>%
dplyr::filter(stringr::str_remove_all(path, "*.bak")) %>%
dplyr::select(path, change_time, birth_time) %>%
dplyr::filter(stringr::str_detect(path, .file)) %>%
dplyr::filter(birth_time == max(birth_time)) %>%
dplyr::pull(path)
message(path)
# logr::put(path)
readr::read_csv(path)
}
?stringr::str_remove
previous <- get_inputfile(.file="totals_by_system")
get_inputfile <- function(.file) {
path <- fs::dir_info("inputfiles", type = "file", regexp=".file") %>%
dplyr::filter(stringr::str_remove_all(path, ".bak$")) %>%
dplyr::select(path, change_time, birth_time) %>%
dplyr::filter(stringr::str_detect(path, .file)) %>%
dplyr::filter(birth_time == max(birth_time)) %>%
dplyr::pull(path)
message(path)
# logr::put(path)
readr::read_csv(path)
}
previous <- get_inputfile(.file="totals_by_system")
get_inputfile <- function(.file) {
path <- fs::dir_info("inputfiles", type = "file", regexp=".file") %>%
dplyr::filter(!stringr::str_detect(path, "*.bak$")) %>%
dplyr::select(path, change_time, birth_time) %>%
dplyr::filter(stringr::str_detect(path, .file)) %>%
dplyr::filter(birth_time == max(birth_time)) %>%
dplyr::pull(path)
message(path)
# logr::put(path)
readr::read_csv(path)
}
previous <- get_inputfile(.file="totals_by_system")
get_inputfile <- function(.file) {
path <- fs::dir_info("inputfiles", type = "file", regexp=".file") %>%
dplyr::filter(!stringr::str_detect(path, "*.bak$")) %>%
dplyr::select(path, change_time, birth_time) %>%
dplyr::filter(stringr::str_detect(path, .file)) %>%
dplyr::filter(birth_time == max(birth_time)) %>%
dplyr::pull(path)
message(path)
# logr::put(path)
readr::read_csv(path)
}
previous <- get_inputfile(.file="totals_by_system")
get_inputfile <- function(.file) {
path <- fs::dir_info("inputfiles", type = "file", regexp=".file") %>%
dplyr::filter(!stringr::str_detect(path, "*.bak$")) %>%
dplyr::select(path, change_time, birth_time) %>%
dplyr::filter(stringr::str_detect(path, .file)) %>%
dplyr::filter(birth_time == max(birth_time)) %>%
dplyr::pull(path)
message(path)
# logr::put(path)
readr::read_csv(path)
}
previous <- get_inputfile(.file="totals_by_system")
rlang::last_error()
get_inputfile <- function(.file) {
path <- fs::dir_info("inputfiles", type = "file", regexp=".file") %>%
dplyr::filter(!stringr::str_detect(path, ".bak")) %>%
dplyr::select(path, change_time, birth_time) %>%
dplyr::filter(stringr::str_detect(path, .file)) %>%
dplyr::filter(birth_time == max(birth_time)) %>%
dplyr::pull(path)
message(path)
# logr::put(path)
readr::read_csv(path)
}
previous <- get_inputfile(.file="totals_by_system")
